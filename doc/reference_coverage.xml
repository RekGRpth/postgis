<?xml version="1.0" encoding="UTF-8"?>
<sect1 id="Coverage">
  <sect1info>
    <abstract>
      <para>These functions operate on sets of polygonal geometry that form "implicit coverages".
      To form a valid coverage polygons must not overlap, and the vertices of adjacent edges must match exactly.
      Coverages are fast to process, and can be operated on with window functions, which retain the coverage topology inside the window partition while altering the edges.</para>
    </abstract>
  </sect1info>

  <title>Coverages</title>

  <refentry id="ST_CoverageInvalidLocations">
    <refnamediv>
      <refname>ST_CoverageInvalidLocations</refname>

      <refpurpose>Window function that finds locations where polygons fail to form a valid coverage.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <funcsynopsis>
        <funcprototype>
          <funcdef>geometry <function>ST_CoverageInvalidLocations</function></funcdef>
          <paramdef><type>geometry winset </type>
            <parameter>geom</parameter></paramdef>
          <paramdef><type>float8 </type>
            <parameter>tolerance = 0</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>Checks if the polygons in the window partition form a valid polygonal coverage,
      and returns linear indicators showing the location of invalid edges (if any) in each polygon.
      </para>
      <para>A set of polygons is a valid coverage if the following conditions hold:
        </para>

      <itemizedlist>
        <listitem><para>
            <emphasis role="bold">Non-overlapping</emphasis> - polygons do not overlap (their interiors do not intersect)
            </para></listitem>
        <listitem><para>
            <emphasis role="bold">Edge-Matched</emphasis> - vertices along shared edges are identical
            </para></listitem>
      </itemizedlist>

      <para>As a window function a value is returned for every input polygon.
      For polygons which violate one or more of the validity conditions the return value is a MULTILINESTRING containing the problematic edges.
      Valid polygons return the value NULL.
      Non-polygonal or empty geometries also produce NULL values.</para>

      <para>The conditions allow a valid coverage to contain holes (gaps between polygons),
      as long as the surrounding polygons are edge-matched.
      However, very narrow gaps are often undesirable.
      If the <parameter>tolerance</parameter> parameter is specified with a non-zero distance,
      edges forming narrower gaps will also be returned as invalid.
      </para>

      <para role="availability" conformance="3.4.0">Availability: 3.4.0 - requires GEOS &gt;= 3.12.0</para>
    </refsection>

    <refsection>
      <title>Examples</title>

      <programlisting>CREATE TABLE coverage (id integer, geom geometry);

INSERT INTO coverage VALUES
  (1, 'POLYGON((0 0, 10 0, 10.1 5, 10 10, 0 10, 0 0))'),
  (2, 'POLYGON((10 0, 20 0, 20 10, 10 10, 10.05 5, 10 0))'),
  (3, 'POLYGON((20 0, 30 0, 30 10, 20 10, 20 0))');

SELECT id, ST_AsText(ST_CoverageInvalidLocations(geom) OVER ())
  FROM coverage;

 id |           st_astext
----+--------------------------------
  1 | LINESTRING(10 0,10.1 5,10 10)
  2 | LINESTRING(10 10,10.05 5,10 0)
  3 |
      </programlisting>

      <programlisting>-- Test entire table for validity
SELECT true = ALL (
    SELECT ST_CoverageInvalidLocations(geom) OVER () IS NULL
    FROM coverage
    );
      </programlisting>
    </refsection>

    <refsection>
      <title>See Also</title>
      <para>
        <xref linkend="ST_CoverageUnion" />,
        <xref linkend="ST_CoverageSimplify" />
      </para>
    </refsection>

  </refentry>


  <refentry id="ST_CoverageSimplify">
    <refnamediv>
      <refname>ST_CoverageSimplify</refname>

      <refpurpose>Window function that simplifies the edges of a polygonal coverage.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <funcsynopsis>
        <funcprototype>
          <funcdef>geometry <function>ST_CoverageSimplify</function></funcdef>
          <paramdef><type>geometry winset </type>
            <parameter>geom</parameter></paramdef>
          <paramdef><type>float8 </type>
            <parameter>tolerance</parameter></paramdef>
          <paramdef choice="opt"><type>boolean </type>
            <parameter>simplifyBoundary = true</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>A window function which simplifies the edges of polygons in a polygonal coverage using the <ulink url="https://en.wikipedia.org/wiki/Visvalingam%E2%80%93Whyatt_algorithm">Visvalingamâ€“Whyatt algorithm</ulink>.
      The simplified outputs are consisent along shared edges, and still form a valid coverage.</para>
      <note><para>If the input is not a valid coverage there may be unexpected artifacts in the output (such as boundary intersections, or separated boundaries which appeared to be shared).
      Use <xref linkend="ST_CoverageInvalidLocations" /> to determine if a coverage is valid.
      </para></note>
      <para>To simplify only the "internal" edges of the coverage (those that are shared by two polygons) set the <parameter>simplifyBoundary</parameter> parameter to false.</para>
      <para role="availability" conformance="3.4.0">Availability: 3.4.0 - requires GEOS &gt;= 3.12.0</para>

    </refsection>

    <refsection>
      <title>Examples</title>

      <programlisting>CREATE TABLE coverage (id integer, geom geometry);

INSERT INTO coverage VALUES
  (1, 'POLYGON((0 0, 10 0, 10.1 5, 10 10, 0 10, 0 0))'),
  (2, 'POLYGON((10 0, 20 0, 20 10, 10 10, 10.1 5, 10 0))'),
  (3, 'POLYGON((20 0, 30 0, 30 10, 20 10, 20 0))');

SELECT id, ST_AsText(ST_CoverageSimplify(geom, 1.0) OVER ())
  FROM coverage;

 id |               st_astext
----+---------------------------------------
  1 | POLYGON((10 0,10 10,0 10,0 0,10 0))
  2 | POLYGON((10 0,20 0,20 10,10 10,10 0))
  3 | POLYGON((20 0,30 0,30 10,20 10,20 0))
      </programlisting>
    </refsection>

    <refsection>
      <title>See Also</title>
      <para>
        <xref linkend="ST_CoverageInvalidLocations" />
      </para>
    </refsection>

  </refentry>

  <refentry id="ST_CoverageUnion">
    <refnamediv>
      <refname>ST_CoverageUnion</refname>

      <refpurpose>Computes the union of a set of polygons forming a coverage by removing shared edges.</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <funcsynopsis>
        <funcprototype>
          <funcdef>geometry <function>ST_CoverageUnion</function></funcdef>
          <paramdef><type>geometry set</type>
            <parameter>geom</parameter></paramdef>
        </funcprototype>
      </funcsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Description</title>

      <para>An aggregate function which unions a set of polygons forming a polygonal coverage.
      The result is a polygonal geometry covering the same area as the coverage.
      This function produces the same result as <xref linkend="ST_Union" />,
      but uses the coverage structure to compute the union much faster.
      </para>

      <note><para>If the input is not a valid coverage there may be unexpected artifacts in the output (such as unmerged or overlapping polygons).
            Use <xref linkend="ST_CoverageInvalidLocations" /> to determine if a coverage is valid.
      </para></note>

      <para role="availability" conformance="3.4.0">Availability: 3.4.0 - requires GEOS &gt;= 3.8.0</para>
    </refsection>

    <refsection>
      <title>Examples</title>

      <programlisting>CREATE TABLE coverage (id integer, geom geometry);

INSERT INTO coverage VALUES
  (1, 'POLYGON((0 0, 10 0, 10.1 5, 10 10, 0 10, 0 0))'),
  (2, 'POLYGON((10 0, 20 0, 20 10, 10 10, 10.1 5, 10 0))'),
  (3, 'POLYGON((20 0, 30 0, 30 10, 20 10, 20 0))');

SELECT ST_AsText(ST_CoverageUnion(geom))
  FROM coverage;

                        st_astext
----------------------------------------------------------
 POLYGON((0 0,0 10,10 10,20 10,30 10,30 0,20 0,10 0,0 0))
      </programlisting>
    </refsection>

    <refsection>
      <title>See Also</title>
      <para>
        <xref linkend="ST_CoverageInvalidLocations" />,
        <xref linkend="ST_Union" />
      </para>
    </refsection>

  </refentry>
</sect1>
